{"version":3,"file":"static/js/443.a0646da6.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?962c","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?42be","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?e370","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__5xeRu\",\"imgContainer\":\"ProfileInfo_imgContainer__fy4bV\",\"mainPhoto\":\"ProfileInfo_mainPhoto__8KDfK\",\"downloadIcon\":\"ProfileInfo_downloadIcon__f6DiI\",\"ownerMainPhoto\":\"ProfileInfo_ownerMainPhoto__JG4tE\",\"status\":\"ProfileInfo_status__ExMJ2\",\"uploader\":\"ProfileInfo_uploader__imOQK\",\"contact\":\"ProfileInfo_contact__ng7VT\",\"profileDataContainer\":\"ProfileInfo_profileDataContainer__yaJYK\",\"button\":\"ProfileInfo_button__2Ld-c\",\"title\":\"ProfileInfo_title__xu9r7\",\"check\":\"ProfileInfo_check__oN1iQ\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() =>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus type={\"text\"}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n// types\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\ntype ProfileStatusStateType = {\r\n    editMode: boolean\r\n    status: string\r\n}","import React, {FC} from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nexport type ProfileDataFormProps = {\r\n    fullname: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n};\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileDataFormProps, Props> & Props> = (\r\n    {\r\n        handleSubmit,\r\n        initialValues,\r\n        profile,\r\n        error,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button className={s.button}>save</button>\r\n            </div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name:</b> {createField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map((key: string) => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileDataFormProps, Props>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useRef, useState} from \"react\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../../redux/profile-reducer\"\r\nimport Preloader from \"../../common/Preloader/Preloader\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport defaultPhoto from \"../../../assets/images/defaultUserPhoto.png\"\r\nimport ProfileDataForm, {ProfileDataFormProps} from \"./ProfileDataForm\";\r\nimport {ProfileRequestType} from \"../../../api/api\";\r\nimport check from \"../../../assets/images/checked.png\"\r\nimport cn from \"classnames\";\r\nimport downloadIcon from \"../../../assets/images/download_icon.png\"\r\n\r\ntype Props = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: <T>(profile: Partial<ProfileRequestType>) => Promise<T>\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: Props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataFormProps) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    const uploadHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const selectFileHandler = () => {\r\n        inputRef && inputRef.current?.click()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                {isOwner\r\n                    ? <>\r\n                        <div onClick={selectFileHandler} className={s.imgContainer}>\r\n                            <img className={cn(s.mainPhoto, {[s.ownerMainPhoto]: isOwner})}\r\n                                 src={profile.photos.large || defaultPhoto} alt=\"photo user\"/>\r\n                            <img className={s.downloadIcon} src={downloadIcon} alt=\"downloadIcon\"/>\r\n                        </div>\r\n                        <input className={s.uploader}\r\n                               type=\"file\"\r\n                               onChange={uploadHandler}\r\n                               accept=\"image/*\"\r\n                               ref={inputRef}\r\n                        />\r\n                    </>\r\n                    : <img className={cn(s.mainPhoto, {[s.ownerMainPhoto]: isOwner})}\r\n                           src={profile.photos.large || defaultPhoto} alt=\"photo user\"/>\r\n                }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n\r\n            <div className={s.profileDataContainer}>\r\n                <h3 className={s.title}>Personal Information</h3>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>\r\n                }</div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataProps) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button className={s.button} onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <img className={s.check} src={check} alt=\"check\"/>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <img className={s.check} src={check} alt=\"check\"/>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <img className={s.check} src={check} alt=\"check\"/>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>}\r\n            <div>\r\n                <img className={s.check} src={check} alt=\"check\"/>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <img className={s.check} src={check} alt=\"check\"/>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map((key: string) => {\r\n                return <Contact key={key} contactTitle={key}\r\n                                contactValue={profile.contacts[key as keyof typeof profile.contacts]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactProps = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactProps) => {\r\n    return <div className={s.contact}><b>{contactTitle}:</b> {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__auLqR\",\"formContainer\":\"MyPosts_formContainer__CHlp0\",\"button\":\"MyPosts_button__+YGNY\",\"posts\":\"MyPosts_posts__aCfH0\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__bsVNB\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport defaultIcon from '../../../../assets/images/defaultUserPhoto.png'\r\n\r\nexport type PostType = {\r\n  id: number\r\n  message: string\r\n  likesCount: number\r\n}\r\nconst Post: React.FC<PostType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src={defaultIcon}\r\n        alt=\"\"/>\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) =>{\r\n\r\n    const messagesElements = [...props.posts]\r\n        .reverse()\r\n        .map(m => <Post key={m.id} id={m.id} message={m.message} likesCount={m.likesCount}/>)\r\n\r\n    const onAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return <form className={s.formContainer} onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea}\r\n               name=\"newPostText\"\r\n               placeholder=\"Post message\"\r\n               value=\"\"\r\n               validate={[maxLength10]}\r\n        />\r\n        <button className={s.button}>Add post</button>\r\n    </form>\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<FormDataType>({form: \"profileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n\r\n//types\r\ntype FormDataType = {\r\n    newPostText: string\r\n}","import {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\"\r\nimport s from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\"\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {ProfileRequestType} from \"../../api/api\";\r\n\r\ntype Props = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: <T>(profile: Partial<ProfileRequestType>) => Promise<T>\r\n}\r\n\r\nconst Profile: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\"\r\nimport Profile from \"./Profile\"\r\nimport {connect} from \"react-redux\"\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\"\r\nimport {AppRootStateType} from \"../../redux/redux-store\"\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileRequestType} from \"../../api/api\";\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType, AppRootStateType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId)\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<AppRootStateType>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): mapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// types\r\ntype mapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: <T>(profile: Partial<ProfileRequestType>) => Promise<T>\r\n}\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\ntype OwnPropsType = mapStatePropsType & mapDispatchPropsType\r\nexport type ProfilePropsType = RouteComponentProps<PathParamsType> & OwnPropsType","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: AppRootStateType): mapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    // class RedirectComponent extends React.Component<any, any> {\r\n    //     render(){\r\n    //         if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n    //         return <Component {...this.props as T}/>\r\n    //     }\r\n    // }\r\n\r\n    function RedirectComponent(props: mapStatePropsType) {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","type","reduxForm","form","handleSubmit","profile","initialValues","error","onSubmit","styles","createField","Input","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","onClick","src","check","alt","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","inputRef","useRef","Preloader","current","click","cn","photos","large","defaultPhoto","downloadIcon","target","files","length","accept","ref","formData","then","defaultIcon","message","likesCount","MyPosts","React","messagesElements","posts","reverse","m","id","AddNewPostFormRedux","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","name","placeholder","validate","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}