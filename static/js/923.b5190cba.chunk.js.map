{"version":3,"file":"static/js/923.b5190cba.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?c3df","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?962c","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?42be","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?e370","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__ePFcL\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__5xeRu\",\"status\":\"ProfileInfo_status__ExMJ2\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() =>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus type={\"text\"}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n// types\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\ntype ProfileStatusStateType = {\r\n    editMode: boolean\r\n    status: string\r\n}","import React from \"react\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../../redux/profile-reducer\"\r\nimport Preloader from \"../../common/Preloader/Preloader\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport defaultPhoto from \"../../../assets/images/defaultUserPhoto.png\"\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                { profile.photos.large\r\n                    ? <img src={profile.photos.large} alt=\"photo user\"/>\r\n                    : <img src={defaultPhoto} alt=\"photo user\"/>\r\n                }\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n// types\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__auLqR\",\"formContainer\":\"MyPosts_formContainer__CHlp0\",\"button\":\"MyPosts_button__+YGNY\",\"posts\":\"MyPosts_posts__aCfH0\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__bsVNB\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostType = {\r\n  id: number\r\n  message: string\r\n  likesCount: number\r\n}\r\nconst Post: React.FC<PostType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src=\"https://www.transparentpng.com/thumb/human/black-human-user-profile-png-icon-free-fsR5FT.png\"\r\n        alt=\"\"/>\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) =>{\r\n    console.log(\"render MyPosts\")\r\n\r\n    const messagesElements = [...props.posts]\r\n        .reverse()\r\n        .map(m => <Post key={m.id} id={m.id} message={m.message} likesCount={m.likesCount}/>)\r\n\r\n    const onAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form className={s.formContainer} onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea}\r\n               name=\"newPostText\"\r\n               placeholder=\"Post message\"\r\n               validate={[required, maxLength10]}\r\n        />\r\n        <button className={s.button}>Add post</button>\r\n    </form>\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<FormDataType>({form: \"profileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n\r\n//types\r\ntype FormDataType = {\r\n    newPostText: string\r\n}","import {addPostActionCreator, PostType} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\"\r\nimport s from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\"\r\nimport {ProfilePropsType} from \"./ProfileContainer\"\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\"\r\nimport Profile from \"./Profile\"\r\nimport {connect} from \"react-redux\"\r\nimport {getUserProfile, getUserStatus, ProfileType, updateStatus} from \"../../redux/profile-reducer\"\r\nimport {AppRootStateType} from \"../../redux/redux-store\"\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType, AppRootStateType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId)\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): mapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// types\r\ntype mapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\ntype OwnPropsType = mapStatePropsType & mapDispatchPropsType\r\nexport type ProfilePropsType = RouteComponentProps<PathParamsType> & OwnPropsType","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: AppRootStateType): mapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    // class RedirectComponent extends React.Component<any, any> {\r\n    //     render(){\r\n    //         if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n    //         return <Component {...this.props as T}/>\r\n    //     }\r\n    // }\r\n\r\n    function RedirectComponent(props: mapStatePropsType) {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","type","profile","photos","large","src","alt","defaultPhoto","Preloader","message","likesCount","MyPosts","React","console","log","messagesElements","posts","reverse","map","m","id","AddNewPostFormRedux","onSubmit","formData","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getUserProfile","getUserStatus","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}